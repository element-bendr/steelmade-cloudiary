import { safeObjectEntries } from '@/lib/utils/safe-data-processing';

/**
 * Get all products from a specific series
 * @param categorySlug The category slug
 * @param seriesSlug The series slug
 */
export const getProductsBySeriesSlug = async (categorySlug: string, seriesSlug: string): Promise<any[]> => {
  try {
    // Use dynamic import to avoid module resolution issues
    const { ProductModule } = await import('@/modules/product');
    return await ProductModule.getProductsBySeriesSlug(categorySlug, seriesSlug);
  } catch (error) {
    console.error(`Error fetching products for series ${seriesSlug}:`, error);
    return [];
  }
};

/**
 * Get a specific product by its slug
 * @param slug The product slug
 */
export const getProductBySlug = async (slug: string): Promise<any | null> => {
  try {
    // Use dynamic import to avoid module resolution issues
    const { ProductModule } = await import('@/modules/product');
    const product = await ProductModule.getProductBySlug(slug);
    return product || null;
  } catch (error) {
    console.error(`Error fetching product ${slug}:`, error);
    return null;
  }
};

/**
 * Process series data safely
 * @param seriesMap The series map to process
 */
export const processSeriesData = (seriesMap: Record<string, any> | null | undefined) => {
  if (!seriesMap) {
    console.warn('Invalid series map provided:', seriesMap);
    return [];
  }
  
  const result = [];
  
  // Process each series in the category using safe function
  try {
    for (const [seriesId, series] of safeObjectEntries(seriesMap)) {
      if (series && typeof series === 'object') {
        result.push({
          id: seriesId,
          ...series
        });
      }
    }
  } catch (error) {
    console.error('Error processing series data:', error);
  }
  
  return result;
};