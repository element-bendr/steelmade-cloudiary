/**
 * !!! DEPRECATED FILE !!!
 * 
 * This file is a temporary/duplicate version and should be removed.
 * Please use the main index.ts file instead.
 * 
 * See docs/file-consolidation-best-practices.md for more information.
 */

// This file is slated for removal as part of the file consolidation effort.
// The enhanced functionality has been incorporated into the main index.ts file.

import { Chair } from '@/lib/factories/chairFactory';

/**
 * Director Series Chair Registry
 * 
 * This module manages the registration and retrieval of director series chairs.
 * It provides a central registry for all chairs in the director series category.
 * 
 * IMPORTANT: Function definitions must come BEFORE chair imports to prevent
 * duplicate function definition errors in TypeScript.
 */

// Internal collection of chairs for our module
const directorSeriesChairs: Chair[] = [];

/**
 * Gets a specific director chair by ID
 * @param chairId The ID of the chair to retrieve
 * @returns The chair with the given ID, or undefined if not found
 */
export function getDirectorChair(chairId: string): Chair | undefined {
  if (!chairId) {
    console.warn('getDirectorChair called with empty chairId');
    return undefined;
  }
  return directorSeriesChairs.find(chair => chair.id === chairId);
}

/**
 * Gets all director series chairs
 * @returns A copy of the array of all director series chairs
 */
export function getAllDirectorChairs(): readonly Chair[] {
  // Return a copy to prevent direct array modification
  return [...directorSeriesChairs];
}

/**
 * Registers a new chair in the director series
 * @param chair The chair to register
 * @returns true if chair was registered, false if it was already registered
 * @throws Error if chair is invalid
 */
export function registerDirectorChair(chair: Chair): boolean {
  // Validate chair
  if (!chair) {
    throw new Error('Cannot register null or undefined chair');
  }
  
  if (!chair.id) {
    throw new Error('Chair must have an id property');
  }

  // Prevent duplicates
  if (directorSeriesChairs.some(c => c.id === chair.id)) {
    console.warn(`Chair with id "${chair.id}" is already registered. Skipping registration.`);
    return false;
  }
  
  // Add chair to registry
  directorSeriesChairs.push(chair);
  console.log(`Chair "${chair.name}" (${chair.id}) registered successfully.`);
  return true;
}

// Export the chairs array for direct access (read-only)
// This is exported as readonly to prevent direct modification
export const getChairs = (): readonly Chair[] => directorSeriesChairs;

// Explicitly import each chair to ensure they are registered
// NOTE: These imports MUST come AFTER all function definitions to prevent
// duplicate function definition errors.
import './ashley';
import './opera';
import './tycoon';
import './bigboss-gold';
import './woodland';
import './boston';